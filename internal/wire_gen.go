// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"blockhouse_streaming_api/config"
	"blockhouse_streaming_api/internal/app/service"
	"blockhouse_streaming_api/internal/common/errors"
	"blockhouse_streaming_api/internal/common/logger"
	kafka2 "blockhouse_streaming_api/internal/infra/kafka"
	"blockhouse_streaming_api/internal/outbound/http/controller"
	"blockhouse_streaming_api/internal/outbound/http/middleware"
	"blockhouse_streaming_api/internal/outbound/http/route"
	"blockhouse_streaming_api/pkg/file/json"
	"blockhouse_streaming_api/pkg/kafka"
	logger2 "blockhouse_streaming_api/pkg/logger"
	"github.com/ansrivas/fiberprometheus/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/etag"
	logger3 "github.com/gofiber/fiber/v2/middleware/logger"
	recover2 "github.com/gofiber/fiber/v2/middleware/recover"
	"os"
	"time"
)

// Injectors from server.go:

func New() (*Server, error) {
	configuration, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	loggerLogger := logger.NewLoggerApplication(configuration)
	admin := kafka.NewAdmin(configuration)
	messageRepository := kafka2.NewMessageHandler(configuration, admin)
	messageService := service.NewMessageService(messageRepository, loggerLogger)
	messageController := controller.NewMessageController(messageService, loggerLogger)
	streamRepository := kafka2.NewStreamHandler(admin)
	streamService := service.NewStreamService(streamRepository, loggerLogger)
	streamController := controller.NewStreamController(streamService, loggerLogger)
	mainRouter := route.NewMainRouter(configuration, messageController, streamController)
	server := NewServerInstance(configuration, loggerLogger, mainRouter)
	return server, nil
}

// server.go:

type Server struct {
	app    *fiber.App
	cfg    *config.Configuration
	logger logger2.Logger
}

func NewServerInstance(
	cfg *config.Configuration, logger4 logger2.Logger,

	mainRouter route.MainRouter,
) *Server {

	app := fiber.New(fiber.Config{
		AppName:      cfg.Server.Name,
		Prefork:      cfg.Server.Prefork,
		ErrorHandler: errors.CustomErrorHandler,
		ReadTimeout:  time.Second * cfg.Server.ReadTimeout,
		WriteTimeout: time.Second * cfg.Server.WriteTimeout,
		JSONDecoder:  json.Unmarshal,
		JSONEncoder:  json.Marshal,
	})

	app.Use(cors.New())
	app.Use(etag.New())
	app.Use(recover2.New())

	app.Use(logger3.New(logger3.Config{
		Next:         nil,
		Done:         nil,
		Format:       "[${time}] ${status} - ${latency} ${method} ${path}\n",
		TimeFormat:   "15:04:05",
		TimeZone:     "Local",
		TimeInterval: 500 * time.Millisecond,
		Output:       os.Stdout,
	}))
	prometheus := fiberprometheus.New("blockhouse-streaming-api")
	prometheus.RegisterAt(app, "/metrics")
	app.Use(prometheus.Middleware)

	app.Use(middleware.RequestIDMiddleware)

	api := app.Group("/")
	mainRouter.Init(&api)

	return &Server{cfg: cfg, logger: logger4, app: app}
}

func (server Server) App() *fiber.App {
	return server.app
}

func (server Server) Config() *config.Configuration {
	return server.cfg
}

func (server Server) Logger() logger2.Logger {
	return server.logger
}
